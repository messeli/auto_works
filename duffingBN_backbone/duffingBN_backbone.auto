zeroLine = run('duffingBN_backbone')
# plot(zeroLine)
duffingBN_backbone = run(zeroLine("BP1"),
	ISW=-1,
	UZR={3:[1.3178]},UZSTOP={3:3},NMX=130,NPR=100,) 
	#e="duffingBN_backbone",c="duffingBN_backbone.1") #run(duffingBN_backbone("1"),UZSTOP={3: 3})
# SP=["BP0"],

# BN The below does not add much to the solution!
# for sol in duffingBN_backbone("BP"): 
# 	duffingBN_backbone = duffingBN_backbone + run(sol,SP=["BP0"],NPR=100,ISW=-1,UZSTOP={3:3},DSMAX=0.5)  #e="duffingBN_backbone",c="duffingBN_backbone.1") #run(duffingBN_backbone("1"),UZSTOP={3: 3})

save(rl(zeroLine + duffingBN_backbone), 'duffingBN_backbone')
# plot(duffingBN_backbone)

#| Write to a dat file (there should be another, more direct method in the doc_AUTO for this)
mydict = duffingBN_backbone[0](7).todict() #|Solution at label 7 of the 1st branch in the bifurcation diagram duffingBN_backbone 
f = open("myDatFile_AUTO.dat","w")
for i in range(0,len(mydict["t"])): f.write(str(mydict["t"][i])+","+str(mydict["U(1)"][i])+","+str(mydict["U(2)"][i])+","+str(mydict["U(3)"][i])+","+str(mydict["U(4)"][i])+"\n")
f.close()


plot(zeroLine+duffingBN_backbone,stability=True,
	bifurcation_y="MAX U(1)" )
clean
