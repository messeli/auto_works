import time
import numpy as np
import re 

startTime = time.time()
#|___111>IPS1
# print("=====111===IPS1")
#|___1_FFF> FORWARD: Cont mH:0-0.9>gamma:0-0.25>Omeg:0-7.0
# print("=====1_FFF===FORWARD_SYNCH")
# print("=====1_FFF===CONTINUE_mH")
# mH = run("ZilliCubic11") 

# print("=====1_FFF===CONTINUE_gamma")
# # gam = run(mH("UZ1"), 
# #     ICP=[1,9],
# #     NMX=1000,
# #     DS=0.001,DSMAX=0.5,
# #     UZSTOP={1:0.25}) 

# forward1 = run(mH("UZ1"),
#     ICP=[2,9],
#     NMX=3000,
#     DS=0.001,DSMAX=0.5,
#     UZSTOP={2:0.5}) 

# kappa = run(forward1("UZ1"),
#     ICP=[8,9],
#     NMX=3000,
#     DS=0.001,DSMAX=0.5,
#     UZSTOP={8:1.0}) 
# beta = run(kappa("UZ1"),
#     ICP=[10,9],
#     NMX=1000,
#     DS=0.001,DSMAX=0.5,
#     UZSTOP={10:0.5}) 
# K = run(beta("UZ1"),
#     ICP=[13,9],
#     NMX=1000,
#     DS=0.001,DSMAX=0.5,
#     UZSTOP={13:100}) 
# print("=====1_FFF===CONTINUE_Omeg_FORWARD")
# forward = run(K("UZ1"),
#     ICP=[2,9],
#     NMX=10000,
#     NTST=200,
#     DS=0.01,DSMAX=0.05,
#     EPSL= 1e-05, EPSU = 1e-05, EPSS =1e-4,
#     ITMX= 8, ITNW= 7, NWTN = 6, # 3
#     UZSTOP={2:7})
# save(forward,"forward") 
#|___1_FFF.

#|___1B_BBB> METHOD B: All-MATLAB startPoints (ONLY for smaller zeta)
print("=====1B_BBB===METHOD_B")
zetaList   = ["1e-2"] #,"8e-3","5e-3","1e-3","1e-4","1e-5"]
eqFileName = ["ZilliCubic11_givenBackwards_zeta_"+x for x in zetaList]
for i in range(0,len(zetaList)):
    l_back = load(
        e=eqFileName[i],
        c="ZilliCubic11",
        ICP=[2,9],
        NTST=200,
        NMX=1000000,
        RL0=0.01, RL1=7.01,
        DS=-0.01,DSMAX=0.01,  #DSMAX=0.00001, 
        EPSL= 1e-04, EPSU = 1e-04, EPSS =1e-3)
    back = merge( run(l_back) + run(l_back,DS='-') )
#|___1B_BBB. METHOD B
#|___1_BBB. BACKWARDS IPS1

try: IPS1= forward+back
except: IPS1 = back
plot(IPS1,bifurcation_x="Omeg",bifurcation_y="Amplitude",
     solution_x="u",solution_y="v",height=600,stability=True) 


#| Kappa Homotopy
# A = load(back,ICP=[8,9],NTST=50,DS=0.01,DSMAX=0.05, 
#     RL0=-0.01,RL1=1.01,UZSTOP={8:[0,1]} )
# B = run(A)+run(A,DS='-')
# plot(B,bifurcation_x="kappa",bifurcation_y="Amplitude",
#      solution_x="u",solution_y="v",height=600,stability=True)
#|___111.

########################################################################

#|___222> IPS2 
#|___2_AAA> METHOD A : ~PURE AUTO 
#|___2A_LLL> periodic solutions
#|___2AL_KKK> Only kappa continuation
# #| Use Matlab-generated orbit at thetaP=2.91(dLoop)/4.05(sLoop) once.
# print("=====2Al_KKK===CONTINUE_MATLAB_ORBIT")
# l_Loop_dat = load(
#    # e="ZilliCubic11_datFileContin_zeta_1e-2_doubleLoop",
#    # dat="onePeriodCycle_ISO_rot_2p91_zeta_1e-2_doubleLoop",
#    e="ZilliCubic11_datFileContin_zeta_1e-2",
#    dat="onePeriodCycle_ISO_rot_4p05_zeta_1e-2",
#    c="ZilliCubic11",
#    NMX=10000,
#    IPS=2, ICP=[2,11,9],
#    RL0=0,RL1=10.01, #UZSTOP={2:[0.01,7.01]}, #10.0
#    UZR={2:[3.5,3.6,3.85,4.5,6,7,8,9]}, #3.5,3.6,3.85,4.5,6,7,8,
#    # UZR={2:np.append(3.6,np.arange(2,7,0.25))},  
#    DS=+0.001, DSMAX=0.05, 
#    NTST=200,
#    EPSL= 1e-07, EPSU = 1e-07, EPSS =1e-4)
# Loop_dat = merge( run(l_Loop_dat) +
#               run(l_Loop_dat,DS="-") ) #|Solution family from .dat
# Loop_cubic = Loop_dat #|Change name for clarity
# IPS2 = Loop_cubic #|Start Populating the bifurcation plot.
# plot(Loop_cubic,
#    stability=True, height=600, 
#    bifurcation_x="Omeg", bifurcation_y="Amplitude",
#    solution_x="u", solution_y="v")

# #| kappa(par(8)) homotopy cubic to contact @ user samplD orbit
# #| OR rho(par(15)) homotopy cubic to power5 @ user samplD orbit
# print("=====2AL_KKK===FORCE_HOMOTOPY")
# count = 0 
# size = len(Loop_cubic("UZ"))
# for Z in Loop_cubic("UZ"):
#    count+=1
#    print("===========",count,"/",size,"=========")
#    try:
#       l_Loop_homot = load(Z,
#          IPS=2, ICP=[8,11,9],
#          # IPS=2, ICP=[15,11,9],
#          NTST=200,# 1000
#          NMX=5000, RL0=-0.1,RL1=2, #|60000
#          UZR={8:[1.0]}, # UZR={8:[1.0,0.985]},
#          #|:SAMPLE @ kappa=1
#          # UZR={15:[0.987]}, 
#          # UZSTOP={15:[1.0]}, #|SAMPLE @ rho=1
#          DS=0.001, DSMAX=0.01) 
#       #|:Contin par8: kappa  from 0 to 1 (cubic to contact)
#       #| Do homotopy in both increasing and decreasing directions of kappa
#       try: 
#          Loop_homot = Loop_homot + \
#             merge( run(l_Loop_homot) + run(l_Loop_homot,DS="-") )
#       except:
#          Loop_homot = \
#             merge( run(l_Loop_homot)+run(l_Loop_homot,DS="-") )
#    except:
#       continue

# plot(Loop_homot,
#    stability=True, height=600,
#    bifurcation_y="Amplitude",
#    solution_x="u", solution_y="v")

# #| Run w/ contactNonlin from one-fd sampled orbits @kappa=1 in Omeg
# #| OR RUN w/ power5Nonlin from one-fd sampled orbits @pho=1 in Omeg
# print("=====2AL_KKK===CONTACT_NONLINEARITY_RUN")
# count = 0
# size = len(Loop_homot('UZ'))
# for X in Loop_homot("UZ"): #|HERE [0] : enough to do one on d solFam
#    count+=1 
#    print("===========",count,"/",size,"=========")
#    try: #|this try could be unnecessary
#       l_Loop_newNonlin = load(X, #'UZ1'
#          IPS=2,ICP=[2,11,9],
#          NMX=4000,
#          NTST=200,
#          RL0=0,RL1=10.1, 
#          DS = -0.001,DSMAX=0.01,
#          UZR={2:3.5} ) #|NEW SAMPLING FOR CONTACT STEEPNESS INCREASE, K.
#       try:
#          Loop_newNonlin = Loop_newNonlin + \
#             merge(run(l_Loop_newNonlin)+run(l_Loop_newNonlin,DS="-"))
#       except:
#          Loop_newNonlin = \
#             merge(run(l_Loop_newNonlin)+run(l_Loop_newNonlin,DS="-"))
#    except: 
#        continue
# #|:Nt:All UZ samples converge to a new sol family for post Omeg=6.6.

# #| Now increase the contact steepness K : 0.01 => 3
# # l_Loop_steepen =load(Loop_newNonlin("UZ"), #|One UZ will be enough.
# #    IPS=2,ICP=[2,11,9] )
# # Loop_steepen = merge(run(l_Loop_steepen)+run(l_Loop_steepen,DS='-'))

# #| Populate periodic sol bifur object
# try:IPS2 = IPS2 + Loop_newNonlin + Loop_steepen
# except: IPS2 = IPS2 + Loop_newNonlin
#|___2AL_KKK. Only kappa continuation

#|___2AL_FFF> Fold of OMEG is fold-continD in KAPPA (Nt:Comment 2AL_KKK)
print("=====2AL_FFF===CONTINUE_MATLAB_ORBIT")
l_Loop_dat = load(
   # e="ZilliCubic11_datFileContin_zeta_1e-2_doubleLoop",
   # dat="onePeriodCycle_ISO_rot_2p91_zeta_1e-2_doubleLoop",
   e="ZilliCubic11_datFileContin_zeta_1e-2",
   dat="onePeriodCycle_ISO_rot_4p05_zeta_1e-2",
   c="ZilliCubic11",
   NMX=10000,
   IPS=2, ICP=[2,11,9],
   RL0=0,RL1=7, #UZSTOP={2:[0.01,7.01]}, #10.0
   DS=+0.001, DSMAX=0.05, 
   NTST=200,
   EPSL= 1e-07, EPSU = 1e-07, EPSS =1e-4)
Loop_dat = merge( run(l_Loop_dat) +
              run(l_Loop_dat,DS="-") ) #|Solution family from .dat
Loop_cubic = Loop_dat #|Change name for clarity
IPS2 = Loop_cubic #|Start Populating the bifurcation plot.
plot(Loop_cubic,
   stability=True, height=600, 
   bifurcation_x="Omeg", bifurcation_y="Amplitude",
   solution_x="u", solution_y="v")

#| Fold continuation 
l_Loop_foldContin = run(Loop_cubic("LP1"),
   IPS=2, ICP=[8,2,11,9], ISW = 2, 
   NMX=10000,
   RL0=0.0,RL1=1.01,
   UZSTOP={8:1.0},
   DS=0.001,DSMAX=0.005,
   NTST=200)
Loop_foldContin = run(l_Loop_foldContin) #|Forward dir is enough

plot(Loop_foldContin,stability=True,
   bifurcation_x="kappa",bifurcation_y="Amplitude")

#| Populate IPS2 
IPS2 = IPS2 + Loop_foldContin

#| RUN tanh
l_Loop_tanh = load(Loop_foldContin("UZ1"),
   IPS=2, ICP=[2,11,9], ISW=1,
   NMX=10000,
   RL0=0.0, RL1=10.0,
   DS=0.001,DSMAX=0.005,
   NTST=200)
Loop_tanh = merge( run(l_Loop_tanh) + \
                   run(l_Loop_tanh,DS='-') ) 

#| Populate IPS2
IPS2 = IPS2 + Loop_tanh 
#|___2A_LLL.
#|___2_AAA. METHOD A
#|___222. IPS2

########################################################################

#|___HHH WHOLE DIAGRAM 
print("=====HHH___RELABEL___PLOT___SAVE")
try:all_sideStudy2 = rl( IPS1+IPS2 )
except:all_sideStudy2 = rl( IPS2 )
p=plot(all_sideStudy2,
   stability=True, height=600,
   bifurcation_x="Omeg", bifurcation_y="Amplitude",
   solution_x="u", solution_y="v")
p.config(color_list="black red green blue\
   violet orange gray brown teal turquoise purple")
save(all_sideStudy2,"all_sideStudy2")

endTime = time.time()
elapsedTime = endTime-startTime
print( "=====FINISH___elapsedTime: ",
   elapsedTime,    " sec"," | ",
   elapsedTime/60, " min" )
#|___HHH END WHOLE DIAGRAM

#|___WWW> Write some output at 'UZ' points to "myDummyWriteFile.txt" 
#| FAIL IN AUTO: Cannot close file > RUN d BELOW IN pythonCodeTry.py  
# f = open('b.all_sideStudy2','r')
# content = f.read()
# f.seek(0)
# lines = f.readlines()
# pattern = r"\n.{13}4.{7}(7.499).+?\n" #|ACTION REQ FOR WHAT TO WRITE
# pat = re.compile(pattern)
# matches = pat.finditer(content)
#
# spans = []
# matchTexts = []
# text = "" 
# for i in matches: 
#    spans.append(i.span(0))
#    matchTexts.append(i.group(0))
#    text = text + i.group(0)[:-1] #|Here w/ [:-1], no extra new line
# f.close()
#
# f = open('myDummyWriteFile.txt', "w")
# f.write(text)
# f.close()   
#|___WWW. Write 'UZ' data



#| DEPOT
# #| To plot externally, export the data (Refer to AUTO doc), FAIL YET
# dLoop_zeta.writeRawFilename("myASCIIoutputFile") #|Fail
# myArray = dLoop_zeta.toArray()
# print("!!!!!!!!!!!size of myArray is, ", len(myArray[0]), len(myArray) )
# with open("myDummFile.txt","w",encoding="utf-8") as f:
#   for r in myArray:
#     for q in r:
#       f.write(str(r)+"\n")