import numpy as n 
# parnames={
# 1:'gamma',
# 2:'Omeg',
# 3:'mH',
# 4:'JpH',
# 5:'epsH',
# 6:'zeta',
# 7:'OmegP',
# 8:'kappa',
# 9:'Amplitude',
# 10:"beta",
# 13:'K',
# 14:'KSI',
# 15:'RHO'}

######NOTES#####
# Nt: D "Get state" & "Record" parts r adD t nt perform contin in d same parameters. 
# ...Ds decrD d time frm ~28 min t ~4 min $ d size f b.* at a similar rate.


###<CONTROLS>###
isOnCubic = True
################


#|>>|IPS2_DL|>> 
print("============================================================ IPS2_DL")
print("============================================================ IPS2_DL : Matlab(cubic)>Omeg")

#|0/4| Dat>Omeg , sample Omeg
Omeg_list = n.array([3,4,5,6]) # UZR={2:[3,4,5,6]}
l_dLoop_dat = load(
	e="ZilliCubic11_datFileContin_zeta_1e-2_doubleLoop",     # .f90
	dat="onePeriodCycle_ISO_rot_2p91_zeta_1e-2_doubleLoop",  # .dat
	c="ZilliCubic11", 
	IPS=2, ICP=[2,11,9,5,6], #Print par6 = zeta |#par5=epsH 
	UZR={2:4},RL0=0,RL1=7.01,NMX=400, 
	NTST=150,DS=+0.01,DSMAX=0.1,EPSL= 1e-06,EPSU=1e-06,EPSS=1e-3);

dLoop_dat = merge( run(l_dLoop_dat) + run(l_dLoop_dat,DS="-") ) #|Solution family from .dat
dLoop_cubic = dLoop_dat #|Change name for clarity

#IPS2 = dLoop_cubic #|Start Populating the bifurcation plot.

plot(dLoop_cubic,top_title="dLoop_cubic",stability=True,height=600,bifurcation_x="Omeg",bifurcation_y="Amplitude",solution_x="u",solution_y="v",bg="beige")


if isOnCubic:
	print("============================================================ IPS2_DL : Matlab(cubic)>Omeg>")
	#| DL_cubic fold contin
	# try:		
	if False:#2-param contin
		print("============================================================ IPS2_DL : Matlab(cubic)>Omeg>epsH(first try with Fold Contin)")
		l_dLoop_cubic_zetaEpsH = run(dLoop_cubic("LP1"),
			IPS=	2,ICP=[5,6,11,9],ISW=2,
			STOP="LP",UZSTOP={5:0.00},RL0=0.0,RL1=5,NMX=80000,NPR=10000,
			DSMAX=0.01)
		
		dLoop_cubic_zetaEpsH_forw = run(l_dLoop_cubic_zetaEpsH)
		# wait()
		dLoop_cubic_zetaEpsH_back = run(l_dLoop_cubic_zetaEpsH,DS="-") 
		dLoop_cubic_zetaEpsH = dLoop_cubic_zetaEpsH_forw+ dLoop_cubic_zetaEpsH_back	

		plot(dLoop_cubic_zetaEpsH,top_title="2param fold cont",stability=True,bifurcation_x="epsH",bifurcation_y="zeta",color_list="black red green blue violet orange gray brown teal turquoise purple",bg="beige")
		

	elif False: 
		#3-param contin #CODIM 2 bifurcation is needed (?)
		l_dLoop_cubic_epsHzetaOmeg = run(dLoop_cubic("LP1"),
			IPS=2,ICP=[5,6,2,11,9],ISW=3,
			UZSTOP={5:0.0},RL0=0.0,RL1=4,NMX=10000,NPR=5)

		dLoop_cubic_zetaEpsH = run(l_dLoop_cubic_epsHzetaOmeg)+run(l_dLoop_cubic_epsHzetaOmeg,DS="-") 

		plot(dLoop_cubic_zetaEpsH,top_title="3param fold cont",stability=True,bifurcation_x="Omeg",bifurcation_y="epsH",bifurcation_z="zeta",color_list="black red green blue violet orange gray brown teal turquoise purple",bg="beige")




	#1/4| Matlab(cubic)>Omeg>zeta , and sample zeta
	print("============================================================ IPS2_DL : Matlab(cubic)>Omeg>zeta")
	DL_cubic_zeta = [] #init bifur-diag-obj(bdo) as a list, as list cn b adD t bdo 
	size = len(dLoop_cubic('UZ'))
	count = 0 ; pos = 0
	zeta_list = n.array([1e-6,1e-5,1e-4,8e-3,5e-3,1e-3,1e-2,0.0125,0.02,0.05,0.08]) #UZR={6:[5e-3,0.01,0.011]} #n.array([0.001,0.01])
	used_Omeg_indexes = []
	
	for X in dLoop_cubic('UZ'):
		count += 1 ; pos += 1 

		#Get state
		[curr_epsH,curr_zeta,curr_Omeg] = [X.__getstate__()["PAR"].values()[par-1] for par in [5,6,2]]
		print("============================================================ IPS2_DL : Matlab>Omeg>zeta : ", "{}/{}/{} on epsH:{}, zeta:{}, Omeg:{}".format(count,pos,size,curr_epsH,curr_zeta,curr_Omeg))

		check = abs(  (Omeg_list-curr_Omeg)/curr_Omeg  )
		Omeg_index = n.argmin(check)
		if min(check)<=1e-2:  #used_Omeg
			#If done before ?
			if Omeg_index in used_Omeg_indexes: 
				count -= 1 
				continue	
			#Record	
			used_Omeg_indexes.append(Omeg_index)
			
		#Contin if not done before 
		l_DL_cubic_zeta = load(X,
			IPS=2,ICP=[6,11,9,5,2],ISW=1,
			UZR={6:1e-5},UZSTOP={6:10},RL0=-0.001,RL1=0.1,NMX=1000,NPR=1000) #zeta_list
		
		DL_cubic_zeta += merge(run(l_DL_cubic_zeta) + run(l_DL_cubic_zeta,DS="-"))
			

	plot(DL_cubic_zeta,top_title="DL_cubic_zeta",bifurcation_x="zeta",bifurcation_y="Amplitude",stability=True,color_list="black red green blue violet orange gray brown teal turquoise purple",bg="beige")


	#2/4| Matlab>Omeg>zeta>epsH at (Omeg,zeta) sample pairs
	print("============================================================ IPS2_DL : Matlab>Omeg>zeta>epsH")
	for Y in DL_cubic_zeta("UZ"):
		[curr_epsH,curr_zeta,curr_Omeg] = [Y.__getstate__()["PAR"].values()[par-1] for par in [5,6,2]]
		print("==== (Omeg,zeta) pairs for epsH contin (part 2/4) ========== IPS2_DL : Matlab>Omeg>zeta>epsH : ", "{}/{}/{} on epsH:{}, zeta:{}, Omeg:{}".format(count,pos,size,curr_epsH,curr_zeta,curr_Omeg))

	# epsH_list = n.array([0,1e-5,1e-4,1e-3,5e-3,8e-3,1e-2,2e-2,5e-2,0.1,0.2,0.25,0.353,0.5,0.8,1.0,1.5,1,8]) #UZR={5:[0.1,0.353,0.75]}  #n.array([0.01,0.1,0.2,0.353])
	epsH_list = n.array([1e-2,1.1e-2,1.2e-2,1.5e-2,2e-2])	

	DL_cubic_zeta_epsH = [] 
	used_zetaOmeg_indexes = []
	
	size = len(DL_cubic_zeta('UZ')) ; count = 0 ; pos = 0
	for Y in DL_cubic_zeta("UZ"): 
		count += 1 ; pos += 1

		#Get State
		[curr_epsH,curr_zeta,curr_Omeg] = [Y.__getstate__()["PAR"].values()[par-1] for par in [5,6,2]]
		print("============================================================ IPS2_DL : Matlab>Omeg>zeta>epsH : ", "{}/{}/{} on epsH:{}, zeta:{}, Omeg:{}".format(count,pos,size,curr_epsH,curr_zeta,curr_Omeg))
		
		[check_zeta,check_Omeg] = [abs(  (zeta_list-curr_zeta)/curr_zeta  )	, abs(  (Omeg_list-curr_Omeg)/curr_Omeg  )]
		(zeta_index,Omeg_index) = ( n.argmin(check_zeta), n.argmin(check_Omeg) )
		if min(check_zeta)<=1e-2 and min(check_Omeg)<=1e-2:  #|Fr low check_zeta/check_epsH,samples fr dsame zeta llb so much mor distant dn 1%, so fr low vals its mor like 5e-2 (??)
			#If done before ?
			if (zeta_index,Omeg_index) in used_zetaOmeg_indexes: 
				count -= 1 
				continue		
			#Record 
			used_zetaOmeg_indexes.append((zeta_index,Omeg_index))

		#Contin if not done before 
		l_DL_cubic_zeta_epsH = load(Y, 
			IPS=2,ICP=[5,11,9,2,6],
			UZR={5:epsH_list},RL0=0.0,RL1=1.0,NMX=300,NPR=1000, #epsH_list
			DS = -0.01) 
		
		DL_cubic_zeta_epsH += run(l_DL_cubic_zeta_epsH) #+ run(l_DL_cubic_zeta_epsH,DS="-")


	plot(DL_cubic_zeta_epsH,top_title="DL_cubic_zeta_epsH",bifurcation_x="epsH",bifurcation_y="Amplitude",stability=True,color_list="black red green blue violet orange gray brown teal turquoise purple",bg="beige")


	#3/4| Matlab>Omeg>zeta>epsH>Omeg at (Omeg,zeta,epsH) pairs
	print("============================================================ IPS2_DL : Matlab>Omeg>zeta>epsH>Omeg")
	DL_cubic_zeta_epsH_Omeg = [] #|OmegVsAmp solFams of all different combinations of zeta and epsH . 
	count = 0 ; pos = 0
	size = len(DL_cubic_zeta_epsH("UZ")) 
	used_epsHzetaOmeg_indexes = []
	
	for Z in DL_cubic_zeta_epsH("UZ"):
		count += 1 ; pos += 1 
			
		#Get state
		[curr_epsH,curr_zeta,curr_Omeg] = [Z.__getstate__()["PAR"].values()[par-1] for par in [5,6,2]]
		print("============================================================ IPS2_DL : Matlab>Omeg>zeta>epsH>Omeg : ", "{}/{}/{} on epsH:{}, zeta:{}, Omeg:{}".format(count,pos,size,curr_epsH,curr_zeta,curr_Omeg))
		
		[check_epsH,check_zeta,check_Omeg] = [abs(  (epsH_list-curr_epsH)/curr_epsH  )  ,  abs(  (zeta_list-curr_zeta)/curr_zeta  )	, abs(  (Omeg_list-curr_Omeg)/curr_Omeg  )]
		(epsH_index,zeta_index,Omeg_index) = ( n.argmin(check_epsH), n.argmin(check_zeta), n.argmin(check_Omeg) )

		if (epsH_index,zeta_index,Omeg_index) in used_epsHzetaOmeg_indexes: 
			print("PASSED")
			print("(epsH_index,zeta_index,Omeg_index)",(epsH_index,zeta_index,Omeg_index))
			print("used_epsHzetaOmeg_indexes",used_epsHzetaOmeg_indexes)
			print(min(check_epsH), n.argmin(check_epsH))
			print(max(check_zeta), n.argmin(check_zeta))
			count -= 1
			continue
		elif (epsH_index,zeta_index,Omeg_index) not in used_epsHzetaOmeg_indexes: #check further
			used_epsHzetaOmeg_indexes.append((epsH_index,zeta_index,Omeg_index))
			# if min(check_epsH)<=0.01 and min(check_zeta)<=0.01 and min(check_Omeg)<=0.01:  #|Fr low check_zeta/check_epsH,samples fr dsame zeta llb so much mor distant dn 1%, so fr low vals its mor like 5e-2 (??)			
			# 	print("PASSED - 1")
			# 	count -= 1 
			# 	continue
			# elif min(check_epsH)<=0.01 and min(check_zeta)<=0.40 and min(check_Omeg)<=0.01: #|small zeta vals can differ up to 40 percent yet they are the same 
			# 	print("PASSED - 2")
			# 	print(check_zeta)
			# 	count -= 1
			# 	continue

		# if min(check_epsH)<=1e-2 and min(check_zeta)<=1e-2 and min(check_Omeg)<=1e-2:  #|Fr low check_zeta/check_epsH,samples fr dsame zeta llb so much mor distant dn 1%, so fr low vals its mor like 5e-2 (??)
		# 	#Is done before?  
		# 	if (epsH_index,zeta_index,Omeg_index) in used_epsHzetaOmeg_indexes: 
		# 		print("PASSED - 1 ")
		# 		count -= 1 
		# 		continue
		# 	#Record 
		# 	used_epsHzetaOmeg_indexes.append((epsH_index,zeta_index,Omeg_index))

		# elif min(check_epsH)<=0.4 and min(check_zeta)<=0.4 and min(check_Omeg)<=0.4: #|small vals can differ up to 40 percent
		# 	if (epsH_index,zeta_index,Omeg_index) in used_epsHzetaOmeg_indexes: 
		# 		print("PASSED - 2 ")
		# 		count -= 1 
		# 		continue
		# 	#Record 
		# 	used_epsHzetaOmeg_indexes.append((epsH_index,zeta_index,Omeg_index))
		
		#Contin if not done before 
		l_DL_cubic_zeta_epsH_Omeg = load(Z,
			IPS=2,ICP=[2,11,9,5,6],
			UZR=[],UZSTOP=[],STOP=["LP2"],RL0=0.01,RL1=10.0,NMX=1000,NPR=10000)
		DL_cubic_zeta_epsH_Omeg += run(l_DL_cubic_zeta_epsH_Omeg) + run(l_DL_cubic_zeta_epsH_Omeg,DS="-")

	print("===DIAGNOSTICS===",type(DL_cubic_zeta_epsH_Omeg))
	plot(DL_cubic_zeta_epsH_Omeg,top_title="DL_cubic_zeta_epsH_Omeg",use_symbols=False,letter_symbols=True,stability=True,bifurcation_x="epsH",bifurcation_y="Omeg",bifurcation_z="Amplitude",color_list="black red green blue violet orange gray brown teal turquoise purple",bg="beige")


	#4/4| foldContins
	print("============================================================ IPS2_DL : Matlab>Omeg>zeta>epsH>Omeg>fold")

	foldContins = [] ; foldContins_forw = [] ; foldCOntins_back= []
	size = len(DL_cubic_zeta_epsH_Omeg("LP")) 
	count = 0 ; pos = 0 
	[used_epsH, used_zeta, used_Omeg] = [n.ones(size)*-100]*3 #|used fold point data will be recorded in these 
	used_epsHzeta_indexes = []
	#|: Checking used_Omeg might be unnecessary bcz fr each LP drs only one Omeg possible, ie its nt like samplJ at any Omeg then it samples at stable&unstable parts of the solFam. 
	
	for T in DL_cubic_zeta_epsH_Omeg("LP"):
		count += 1 ; pos += 1
	
		#Get state
		[curr_epsH,curr_zeta,curr_Omeg] = [T.__getstate__()["PAR"].values()[par-1] for par in [5,6,2]]
		print("============================================================ IPS2_DL : Matlab>Omeg>zeta>epsH>Omeg>fold : ", "{}/{}/{} on epsH:{}, zeta:{}, Omeg:{}".format(count,pos,size, curr_epsH,curr_zeta,curr_Omeg))
		
		[check_epsH,check_zeta] = [ abs(  (epsH_list-curr_epsH)/curr_epsH  )  ,  abs(  (zeta_list-curr_zeta)/curr_zeta  ) ]
		(epsH_index,zeta_index) = ( n.argmin(check_epsH), n.argmin(check_zeta) )
		if min(check_epsH)<=1e-2 and min(check_zeta)<=1e-2:  #|Fr low check_zeta/check_epsH,samples fr dsame zeta llb so much mor distant dn 1%, so fr low vals its mor like 5e-2 (??)
			#If done before ?
			if (epsH_index,zeta_index) in used_epsHzeta_indexes: 
				count -= 1 
				continue		
			#Record 
			used_epsHzeta_indexes.append((epsH_index,zeta_index,Omeg_index))

		[check_epsH,check_zeta] = [ abs(  (used_epsH-curr_epsH)/curr_epsH  )  ,  abs(  (used_zeta-curr_zeta)/curr_zeta  ) ]
		if min(check_epsH)<=1e-2 and min(check_epsH)<=1e-2 : 
			count -= 1 
			continue

		
		#Contin if not done before 
		l_foldContins = run(T,
			ICP=[5,2,11,9,6],ISW=2 , 
			STOP=[],UZR={5:0.1},UZSTOP={2:7},RL0=0.0,RL1=1.0,NMX=7000 ,   #STOP=["R110","BR40"]
			DS=0.001,DSMAX=0.001,NPR=100000)
		try: foldContins_forw = run(l_foldContins)
		except: pass
		try: foldContins_back = run(l_foldContins,DS="-") 
		except: pass
		foldContins += merge( foldContins_forw + foldContins_back )

		#Record
		used_epsH[count-1] = curr_epsH ; used_zeta[count-1] = curr_zeta ; used_Omeg[count-1] = curr_Omeg

	
	save(foldContins,"foldContins")
	plot(foldContins,top_title="foldContins",bifurcation_x="epsH",bifurcation_y="Amplitude",bifurcation_z="zeta",stability=True,color_list="black red green blue violet orange gray brown teal turquoise purple",bg="beige")
	plot(DL_cubic_zeta_epsH_Omeg+foldContins,top_title="DL_cubic_zeta_epsH_Omeg+foldContins",bifurcation_x="epsH",bifurcation_y="Omeg",bifurcation_z="Amplitude",stability=True,color_list="black red green blue violet orange gray brown teal turquoise purple",bg="beige")

	# DL_all = DL_cubic_zeta + DL_cubic_zeta_epsH + DL_cubic_zeta_epsH_Omeg + foldContins
	# save(DL_all, "DL_all")
	# plot(DL_all,top_title="DL_all+foldContins",use_symbols=False,bifurcation_x="epsH",bifurcation_y="Amplitude",bifurcation_z="zeta",stability=True,color_list="black red green blue violet orange gray brown teal turquoise purple")


	#5/4| is the bizarre fold contins allright? in Omeg back??
	foldContins_Omeg = []
	for E in foldContins("UZ"):
		l_foldContins_Omeg = load(E, ICP=[2,11,9,5,6],UZSTOP={2:10},RL0=0, RL1=15,DSMAX=0.1, NMX = 10000)
		foldContins_Omeg += run(l_foldContins_Omeg) + run(l_foldContins_Omeg,DS="-")
	plot(foldContins_Omeg, top_title="foldContins_Omeg", stability=True, bifurcation_x="epsH", bifurcation_y="Omeg", bifurcation_z="Amplitude",bg="beige")
	plot(DL_cubic_zeta_epsH_Omeg+foldContins+foldContins_Omeg, top_title="DL_cubic_zeta_epsH_Omeg+foldContins+foldContins_Omeg", stability=True,bifurcation_x="epsH", bifurcation_y="Omeg",bifurcation_z="Amplitude",bg="beige")







else: #if isOnTanhContacts:
	#| Homotopy to newNonlin with kappa=0>1 OR rho=0>1 for tanh OR quintic, respectively (par8 OR par15)
	count = 0 
	size = len(dLoop_cubic("UZ"))
	for Z in dLoop_cubic("UZ"):
		count+=1
		print("===DIAGNOSTIC===IPS2_A_KAPPA_DL===Homotopy2newNonlin=",count,"/",size,)
		# if count>=2: break
		dLoop_homot = []
		
		try:		
			l_dLoop_homot = load(Z,
				IPS=2, ICP=[8,11,9,2], # In d case of RHO(quintic): IPS=2, ICP=[15,11,9],
				UZR={8:[1.0]},RL1=1.01,NMX=5000, #|NMX=60000 | UZR={8:[1.0,0.985]} | UZR={15:[0.987]}, | UZSTOP={15:[1.0]}
				NTST=200,DS=0.001,DSMAX=0.01) 
			dLoop_homot += merge( run(l_dLoop_homot) + run(l_dLoop_homot,DS="-") )
			
			if len(dLoop_homot("UZ")):
				break

		except:
			continue

	plot(dLoop_homot,top_title="dLoop_homot",stability=True,height=600,bifurcation_y="Amplitude",solution_x="u",solution_y="v")

	#| SolFam of dLoop with newNonlin
	count = 0
	size = len(dLoop_homot('UZ'))
	dLoop_newNonlin = []
	for X in dLoop_homot("UZ"):
		count+=1 
		print("===DIAGNOSTIC===IPS2_A_KAPPA_DL===newNonlinSolFam=",count,"/",size,)
		if count>=2: break
		
		try: #|this try could be unnecessary
			
			l_dLoop_newNonlin = load(X,  #'UZ1'
				IPS=2,ICP=[2,11,9,8],NPR=1000,
				UZR={2:9.5},RL0=0,RL1=10.1,NMX=10000,
				NTST=300,DS=-0.001,DSMAX=0.01) #|NEW SAMPLING FOR CONTACT STEEPNESS INCREASE, K.
			dLoop_newNonlin += run(l_dLoop_newNonlin) #+run(l_dLoop_newNonlin,DS="-") #merge()
			
			if len(dLoop_newNonlin):
				break
		except: 
			continue
	
	plot(dLoop_newNonlin,top_title="dLoop_newNonlin before epsH change",stability=True,height=600,bifurcation_y="Amplitude",solution_x="u",solution_y="v")
	#save(dLoop_newNonlin, "dLoop_newNonlin") 

	#| DL_newNonlin epsH-zeta plane 
	for L in dLoop_newNonlin("LP"):
		
		l_dLoop_newNonlin_zetaEpsH = run(L,
			IPS=2,ICP=[5,6,11,9,2],ISW=2,
			UZSTOP={5:0.01},RL0=0.0,RL1=3.5,NMX=10000,NPR=1000)
		dLoop_newNonlin_zetaEpsH = run(l_dLoop_newNonlin_zetaEpsH)+run(l_dLoop_newNonlin_zetaEpsH,DS="-") 
		
		plot(dLoop_newNonlin_zetaEpsH)














# DEPOT
#1

	#for X in dLoop_cubic('UZ'): 
		# print(type(X)) #<class 'auto.parseS.AUTOSolution'>
		# print(dir(X))
		# print(X.data) #print(X.data_keys) for the keys
		#print(X.items) #fail
		#print(X.keys()) #fail
		#print(X.values) #fail
		#for i in X.iteritems(): print(i) #dat file like content in order.
		#for i in X.iterkeys(): print(i) #u,v,u_dot,v_dot
		#for i in X.itervalues(): print(i) #dat file like content printed in order.
		#print(X.todict()) #dat file like content in a dictionary.
		#print(X.info()) #short view of todict content 
		# print(X.__getstate__()) #prints epsH and zeta, a dictionary.
		# print(X.__getstate__()["PAR"])
		# print(type(X.__getstate__()["PAR"])) #<class 'auto.parseS.AUTOParameters'>
		# print(X.__getstate__()["PAR"].values()[6-1]) #.items() .values() .keys()

#2

# print("=====================================================DIAGNOSTIC[0.0]")
# curr_data = dLoop_cubic.getIndex(10)["data"] #<class 'auto.parseB.BDPointData'>
# curr_epsH = curr_data[-2]
# curr_zeta = curr_data[-1]
# print("=====================================================DIAGNOSTIC[0.1]")


